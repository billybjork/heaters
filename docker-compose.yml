services:
  # 1) Prefect metadata Postgres
  prefect-postgres:
    image: postgres:16-alpine
    container_name: prefect-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER:     ${PREFECT_POSTGRES_USER:-prefect}
      POSTGRES_PASSWORD: ${PREFECT_POSTGRES_PASSWORD:-prefect}
      POSTGRES_DB:       ${PREFECT_POSTGRES_DB:-prefect}
    volumes:
      - prefect_pgdata:/var/lib/postgresql/data
    ports:
      - "${PREFECT_POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PREFECT_POSTGRES_USER:-prefect} -d ${PREFECT_POSTGRES_DB:-prefect}"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 60s
    networks:
      - app-network

  # 2) Application Postgres (with pgvector)
  app-postgres:
    image: pgvector/pgvector:pg16
    container_name: app-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER:     ${APP_DB_USER:-app_user}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD:-app_password}
      POSTGRES_DB:       ${APP_DB_NAME:-meatspace_app}
    volumes:
      - app_pgdata:/var/lib/postgresql/data
    ports:
      - "${APP_DB_PORT_EXTERNAL:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APP_DB_USER:-app_user} -d ${APP_DB_NAME:-meatspace_app}"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - app-network

  # 3) Prefect Orion Server (API & UI)
  prefect-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.prefect-server
    container_name: prefect-server
    restart: unless-stopped
    depends_on:
      prefect-postgres:
        condition: service_healthy
    environment:
      # Tell Orion to bind on all interfaces inside the container:
      PREFECT_SERVER_API_HOST: 0.0.0.0
      # And tell the UI to connect to the API via localhost on your host machine:
      PREFECT_UI_API_URL: http://localhost:4200/api
      # Database settings
      PREFECT_API_DATABASE_CONNECTION_URL: "postgresql+asyncpg://${PREFECT_POSTGRES_USER}:${PREFECT_POSTGRES_PASSWORD}@prefect-postgres:${PREFECT_POSTGRES_PORT}/${PREFECT_POSTGRES_DB}"
      PREFECT_API_DATABASE_TIMEOUT: ${PREFECT_API_DATABASE_TIMEOUT:-600}
    command: >
      prefect server start --host 0.0.0.0 --port 4200
    ports:
      - "4200:4200"
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:4200/api/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 120s
    networks:
      - app-network

  # 4) Backend (Prefect worker + your Python code)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      -  .env
    container_name: backend-worker
    restart: unless-stopped
    depends_on:
      prefect-postgres:
        condition: service_healthy
      app-postgres:
        condition: service_healthy
      prefect-server:
        condition: service_healthy
    environment:
      PREFECT_WORKER_CONCURRENCY_LIMIT: "3" # Avoid OOM issues; tweak as needed
      PREFECT_API_URL:      ${PREFECT_API_URL}
      DATABASE_URL:     "postgresql://${APP_DB_USER}:${APP_DB_PASSWORD}@app-postgres:5432/${APP_DB_NAME}"
      S3_BUCKET_NAME:       ${S3_BUCKET_NAME}
      AWS_REGION:           ${AWS_REGION}
      AWS_ACCESS_KEY_ID:    ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      CLOUDFRONT_DOMAIN:    ${CLOUDFRONT_DOMAIN}
    volumes:
      - ./backend:/app
      - ./scripts:/app/scripts
    command: >
      sh -c "
        echo '⏳ Waiting for Prefect…' &&
        until curl -fsS ${PREFECT_API_URL}/health; do sleep 5; done &&
        echo '🚀 Starting Prefect worker…' &&
        exec prefect worker start --pool default-agent-pool
      "
    networks:
      - app-network

  # 5) Frontend (Phoenix LiveView)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    depends_on:
      app-postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MIX_ENV:       dev
      DISABLE_ASSET_WATCHERS: "true"
      DATABASE_URL:  "postgresql://${APP_DB_USER}:${APP_DB_PASSWORD}@app-postgres:5432/${APP_DB_NAME}"
    ports:
      - "4000:4000"
    volumes:
      - ./frontend:/app
    networks:
      - app-network
    command: mix phx.server

  # 6) Automated DB Backup Service
  db-backup:
    image: postgres:16-alpine
    container_name: db-backup
    restart: unless-stopped
    depends_on:
      - app-postgres
      - prefect-postgres
    # Load your repo-root .env so all APP_DB_* and AWS_* vars are available
    env_file:
      - .env
    volumes:
      # mount both PG data volumes read-only
      - app_pgdata:/var/lib/postgresql/data:ro
      - prefect_pgdata:/var/lib/postgresql/data:ro
      # location for dumps on the host
      - ./backups:/backups
      # your backup script
      - ./scripts:/scripts:ro
    environment:
      # map your APP_* names into the PG_* names the script expects
      PG_HOST:     ${APP_DB_HOST}
      PG_PORT:     ${APP_DB_PORT_INTERNAL}
      PG_USER:     ${APP_DB_USER}
      PG_DB:       ${APP_DB_NAME}
      # let the script use PGPASSWORD
      PGPASSWORD:  ${APP_DB_PASSWORD}
      # retention and optional S3 upload
      RETENTION_DAYS: ${RETENTION_DAYS:-7}
      AWS_S3_BUCKET:  ${S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID:    ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    command: >
      sh -c "
        while true; do
          /scripts/pg_backup.sh
          sleep 24h
        done
      "
    networks:
      - app-network

volumes:
  prefect_pgdata:
  app_pgdata:

networks:
  app-network:
    driver: bridge