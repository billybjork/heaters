import Config

# Configure the database
config :frontend, Frontend.Repo,
  # Note: These settings might be overridden by the DATABASE_URL setting near the end of the file
  username: "postgres",
  password: "postgres",
  hostname: "localhost",
  database: "frontend_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :frontend, FrontendWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {0, 0, 0, 0}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "Hcf01GGw0FYxDuBv8DYlZVdkYmxTfFai9aTdCBHzKowVAZE6/nQrGcYm5btt06wI",
  watchers: [
    # Watch node_modules for changes for esbuild (JS compilation)
    node: [
      "node_modules/esbuild/bin/esbuild", # Path to esbuild binary
      "--watch", # Run esbuild in watch mode
      "--bundle", "js/app.js",
      "--target=es2017",
      "--outdir=../priv/static/assets",
      "--external:/fonts/*", # Prevent bundling fonts
      "--external:/images/*", # Prevent bundling images
      cd: Path.expand("../assets", __DIR__),
      env: %{"NODE_PATH" => Path.expand("../deps", __DIR__)}
    ],
    # Watch CSS, config, and template files for Tailwind changes (CSS compilation)
    node: [
      "node_modules/tailwindcss/lib/cli.js", # Path to Tailwind CLI binary
      "--input=css/app.css", # Input CSS file (with @import directives)
      "--output=../priv/static/assets/app.css", # Output compiled CSS
      "--config=tailwind.config.js", # Tailwind config file
      "--watch", # Run Tailwind in watch mode
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :frontend, FrontendWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/assets/.*(js|css|png|jpeg|jpg|gif|svg)$", # Updated path to watch compiled assets
      ~r"priv/gettext/.*(po)$",
      ~r"lib/frontend_web/(controllers|live|components|layouts)/.*(ex|heex)$" # Added layouts
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :frontend, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Include HEEx debug annotations as HTML comments in rendered markup
config :phoenix_live_view, :debug_heex_annotations, true

# Load .env - Make sure Dotenvy is added to mix.exs if you use this
# Consider using config/runtime.exs for runtime configuration instead
if Code.ensure_loaded?(Dotenvy) and File.exists?(".env") do
  Dotenvy.load()
end

# Override DB config potentially with ENV var (keep this logic if needed)
config :frontend, Frontend.Repo,
  url: System.get_env("DATABASE_URL") || "ecto://postgres:postgres@localhost/frontend_dev",
  pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10"), # Added pool size from env
  show_sensitive_data_on_connection_error: true,
  stacktrace: true
