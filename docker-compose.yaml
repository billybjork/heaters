volumes:
  app_db_dev_data:

networks:
  app-network:
    driver: bridge

services:

  # Development Database for Frontend AND Backend
  app-db-dev:
    image: pgvector/pgvector:pg16
    container_name: app-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: frontend_dev_db
    volumes:
      - app_db_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d frontend_dev_db"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # Frontend (Phoenix Development Server)
  frontend:
    image: hexpm/elixir:1.16.2-erlang-26.2.4-alpine-3.19.1
    container_name: frontend-dev
    env_file:
      - .env
    environment:
      MIX_ENV: dev
      APP_ENV: ${APP_ENV:-development}
      PHX_HOST: localhost
      PORT: "4000"
      ERL_AFLAGS: "-kernel shell_history enabled"
    working_dir: /app
    volumes:
      - ./:/app
    command: >
      sh -c "
        apk add --no-cache bash nodejs npm git openssh-client postgresql16-client inotify-tools file && \
        mix local.hex --force && \
        mix local.rebar --force && \
        mix deps.get && \
        (cd assets && npm install --loglevel error) && \
        until pg_isready -h app-db-dev -p 5432 -U dev_user -d frontend_dev_db; do sleep 2; done && \
        mix ecto.create && \
        mix ecto.migrate && \
        mix phx.server
      "
    ports:
      - "4000:4000"
    depends_on:
      app-db-dev:
        condition: service_healthy
    networks:
      - app-network
    tty: true
    stdin_open: true